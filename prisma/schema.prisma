generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model UserPermission {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  role              UserRole
  resource          String
  actions           String[]
  
  permissions   Permission @relation(fields: [actions], references: [action])
  @@map("user_permissions")
}

enum UserRole {
  ADMIN
  USER
}

model Permission {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  action            String           @unique
  userPermissions   UserPermission[]
  @@map("permissions")
}

// User model
model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String
  firstname         String    @default("")
  lastname          String    @default("")
  emailVerified     DateTime? @map("email_verified")
  verified          Boolean   @default(false)
  history           String[]  @default([])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  carts             Cart[]
  role              UserRole
  @@map("users")
}

model Cart {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  productId         String        @db.ObjectId
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  @@map("brands")
}

model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  model         String
  brandId       String     @db.ObjectId
  frets         Int
  woodType      String
  description   String
  url           String
  price         Int
  available     Int         @default(0)
  itemsSold     Int         @default(0)
  shipping      Boolean     @default(false)
  images        String[]    @default([])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  carts         Cart[]
  brand         Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @db.String
  refresh_token      String? @db.String
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model VerificationToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier   String
  token        String   @unique
  expires      DateTime
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Site {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  hours         String
  email         String
  phone         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  @@map("sites")
}
